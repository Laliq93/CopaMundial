/* stored procedure para agrear un nuevo partido */
CREATE OR REPLACE FUNCTION AgregarPartido
(_fechaInicio timestamp, _fechaFin timestamp, _arbitro VARCHAR(30),
 _equipo1 integer, _equipo2 integer, _estadio integer)
RETURNS integer AS
$$
BEGIN

   INSERT INTO PARTIDO(pa_id, pa_fechaInicio, pa_fechaFin, 
    pa_arbitro, pa_eq1_id, pa_eq2_id, pa_es_id) VALUES
    (nextval('seq_Partido'), _fechaInicio, _fechaFin , _arbitro,
     _equipo1, _equipo2, _estadio);

   RETURN currval('seq_Partido');

END;
$$ LANGUAGE plpgsql;
--select * from agregarpartido('2018/02/12 1:00:00', '2018/02/12 1:00:00' , 'pedro',1, 2, 3);

/* stored procedure para consultar un partido en especifico por su Id */
CREATE OR REPLACE FUNCTION ConsultarPartido(_idPartido integer)
RETURNS TABLE
  (id integer,
   fechaInicio timestamp,
   fechaFin timestamp,
   arbitro varchar,
   equipo1 integer,
   equipo2 integer,
   estadio integer)
AS
$$
BEGIN
  RETURN QUERY SELECT
  pa_id, pa_fechaInicio, pa_fechaFin, pa_arbitro, pa_eq1_id, pa_eq2_id, pa_es_id
  FROM Partido
  WHERE pa_id=_idPartido;
END;
$$ LANGUAGE plpgsql;
--select * from consultarpartido(2)

/* stored procedure para consultar todos los partidos existentes */
   CREATE OR REPLACE FUNCTION ConsultarPartidos()
RETURNS TABLE
  (id integer,
   fechaInicio timestamp,
   fechafin timestamp,
   arbitro varchar,
   equipo1 integer,
   equipo2 integer,
   estadio integer)
AS
$$
BEGIN
  RETURN QUERY SELECT
  pa_id, pa_fechaInicio, pa_fechaFin, pa_arbitro, pa_eq1_id, pa_eq2_id, pa_es_id
  FROM Partido;
END;
$$ LANGUAGE plpgsql;

--select * from consultarpartidos()

/* stored procedure para consultar los partidos a futuro de la fecha*/
CREATE OR REPLACE FUNCTION ConsultarPartidosSiguientes(fecha timestamp)
RETURNS TABLE
  (id integer,
   fechaInicio timestamp,
   fechaFin timestamp,
   arbitro varchar,
   equipo1 integer,
   equipo2 integer,
   estadio integer)
AS
$$
BEGIN
  RETURN QUERY SELECT
  pa_id, pa_fechaInicio, pa_fechaFin, pa_arbitro, pa_eq1_id, pa_eq2_id, pa_es_id
  FROM Partido
  WHERE pa_fechaInicio > fecha;
END;
$$ LANGUAGE plpgsql;

--select * from ConsultarPartidosSiguientes('2018-02-13 01:00:00')

/* stored procedure para modificar el partido al que le corresponda el Id */
CREATE OR REPLACE FUNCTION ModificarPartido
(_idPartido integer, _fechaInicio timestamp, _fechaFin timestamp, _arbitro VARCHAR(30),
 _equipo1 integer, _equipo2 integer, _estadio integer)
RETURNS void AS
$$
BEGIN

   UPDATE PARTIDO SET pa_fechaInicio= _fechaInicio, pa_fechaFin = _fechaFin,  pa_arbitro= _arbitro,
    pa_eq1_id =_equipo1,  pa_eq2_id =_equipo2, pa_es_id = _estadio
  WHERE (pa_id = _idPartido);

END;
$$ LANGUAGE plpgsql;


--select * from Modificarpartido(1,'2018/06/27 1:00:00', '2018/06/27 3:00:00', 'pedro', 1, 2, 3)

/* stored procedure para agrear la alineacion a equipo y partido en especifico */
CREATE OR REPLACE FUNCTION AgregarAlineacion
(_capitan boolean, _posicion VARCHAR(30), _titular boolean,
 _jugador integer, _equipo integer, _partido integer)
RETURNS integer AS
$$
BEGIN

   INSERT INTO ALINEACION(al_id, al_capitan, 
    al_posicion, al_titular, al_ju_id, al_eq_id, al_pa_id) VALUES
    (nextval('seq_Alineacion'), _capitan, _posicion, _titular,
     _jugador, _equipo, _partido);

   RETURN currval('seq_Alineacion');

END;
$$ LANGUAGE plpgsql;
--select * from agregaralineacion(true, 'delantero', true, 1, 1, 1)

/* stored procedure para consultar la alineacion de un partido en especifico */
CREATE OR REPLACE FUNCTION ConsultarAlineacionPorPartido(idPartido integer)
RETURNS TABLE
  (id integer,
   _capitan boolean,
   _posicion varchar(30),
   _titular boolean,
   _jugador integer,
   _equipo integer,
   _partido integer)
AS
$$
BEGIN
  RETURN QUERY SELECT
  al_id, al_capitan, al_posicion, al_titular, al_ju_id, al_eq_id, al_pa_id
  FROM Alineacion
  WHERE al_pa_id = idPartido;
END;
$$ LANGUAGE plpgsql;

--select * from consultaralineacionporpartido(1)

/* stored procedure para modificar la alineacion que corresponde al Id */
CREATE OR REPLACE FUNCTION ModificarAlineacion
(_idAlineacion integer, _capitan boolean, _posicion VARCHAR(30), _titular boolean,
 _jugador integer, _equipo integer, _partido integer)
RETURNS integer AS
$$
BEGIN

     UPDATE ALINEACION SET  al_capitan = _capitan, 
    al_posicion= _posicion, al_titular= _titular, al_ju_id= _jugador, al_eq_id= _equipo, al_pa_id= _partido
    WHERE (al_id= _idAlineacion);

   RETURN _idAlineacion;

END;
$$ LANGUAGE plpgsql;

--select * from modificaralineacion(1, false, 'defensa', true, 1,1,1)

/* stored procedure para eliminar la alineacion de un partido*/
CREATE OR REPLACE FUNCTION EliminarAlineacion(_idAlineacion integer)
RETURNS void AS
$$
BEGIN

    DELETE FROM ALINEACION 
    WHERE (al_id= _idAlineacion);

END;
$$ LANGUAGE plpgsql;

--select * from EliminarAlineacion(1)

/* stored procedure para consultar la alineacion de un partido en especifico */
CREATE OR REPLACE FUNCTION ConsultarTitularesPorPartidoYEquipo(idPartido integer, idEquipo integer)
RETURNS TABLE
  (id integer,
   _capitan boolean,
   _posicion varchar(30),
   _titular boolean,
   _jugador integer,
   _equipo integer,
   _partido integer)
AS
$$
BEGIN
  RETURN QUERY SELECT
  al_id, al_capitan, al_posicion, al_titular, al_ju_id, al_eq_id, al_pa_id
  FROM Alineacion
  WHERE al_pa_id = idPartido AND al_eq_id = idEquipo AND al_titular = true;
END;
$$ LANGUAGE plpgsql;

--select * from ConsultarTitularesPorPartidoYEquipo(1, 4)

/* stored procedure para consultar la alineacion de un partido en especifico */
CREATE OR REPLACE FUNCTION ConsultarCapitanPorPartidoYEquipo(idPartido integer, idEquipo integer)
RETURNS TABLE
  (id integer,
   _capitan boolean,
   _posicion varchar(30),
   _titular boolean,
   _jugador integer,
   _equipo integer,
   _partido integer)
AS
$$
BEGIN
  RETURN QUERY SELECT
  al_id, al_capitan, al_posicion, al_titular, al_ju_id, al_eq_id, al_pa_id
  FROM Alineacion
  WHERE al_pa_id = idPartido AND al_eq_id = idEquipo AND al_capitan = true;
END;
$$ LANGUAGE plpgsql;

--select * from ConsultarCapitanPorPartidoYEquipo(1, 4)